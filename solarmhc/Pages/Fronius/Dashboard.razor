@using WebScraper;
@using solarmhc.Pages.Fronius.Components
@page "/fronius/dashboard"

<h3>Fronius Dashboard</h3>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="FetchData">Fetch Data</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StopFetchingData">Stop Fetching</MudButton>

<MudGrid Class="mt-5">
    @* Current Power Widget *@
    <MudItem>
        <CascadingValue Value="SharedData">
            <CurrentPower />
        </CascadingValue>
    </MudItem>
</MudGrid>

@code {
    private SharedData SharedData = new SharedData();
    private WebScraper.FroniusWebScraper webScraperService;
    private CancellationTokenSource cts;

    private async Task FetchData()
    {
        // Replace with your actual data URL
        string dataUrl = "https://www.solarweb.com/Home/GuestLogOn?pvSystemId=fadf7bd8-f901-4948-8683-a4dfd7d8b677";

        webScraperService = new WebScraper.FroniusWebScraper();
        cts = new CancellationTokenSource();
        await webScraperService.StartFetchingPowerAsync(dataUrl, cts.Token, UpdateData);
    }

    private void UpdateData(string data)
    {
        SharedData.Data = data;
        // Parse and update the chart data
        if (TryParseData(data, out double utilizedPower))
        {
            double totalCapacity = 25.0; // Total capacity of the system in kWh
            double remainingCapacity = totalCapacity - utilizedPower;

            SharedData.ChartData[0] = utilizedPower; // Utilized power
            SharedData.ChartData[1] = remainingCapacity; // Remaining capacity
        }

        InvokeAsync(StateHasChanged); // Ensure the UI updates
    }

    private bool TryParseData(string data, out double utilizedPower)
    {
        utilizedPower = 0;
        try
        {
            // Example input: "21.2 kW\nUtilization 89 %"
            var lines = data.Split('\n');
            if (lines.Length >= 1)
            {
                var powerString = lines[0].Replace("kW", "").Trim();
                if (double.TryParse(powerString, out utilizedPower))
                {
                    return true;
                }
            }
        }
        catch
        {
            // Handle any parsing errors
        }
        return false;
    }

    private void StopFetchingData()
    {
        SharedData.ChartData[0] = 0; // Utilized power
        SharedData.ChartData[1] = 100; // Remaining capacity
        cts.Cancel();
        webScraperService.StopFetching();
        SharedData.Data = null;
        InvokeAsync(StateHasChanged); // Ensure the UI updates
    }
}
