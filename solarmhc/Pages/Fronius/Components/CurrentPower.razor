@using solarmhc.Models;
@using solarmhc.Models.Services;
@inject SolarDataService SolarDataService

<MudPaper Class="mt-3">
    <h2 class="text-center pt-3">Current Power</h2>
    <hr>
    @if (!string.IsNullOrEmpty(SolarDataService.Data) && !SolarDataService.Data.Contains("Offline"))
    {
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="SolarDataService.ChartData" InputLabels='new string[] { "Utilization", "Capacity" }' Colors='new string[] { "#ff0000", "#cccccc" }'>
            <CustomGraphics>
                <text x="50%" y="60%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">@SolarDataService.Data.Substring(0,7)</text>
                <text x="50%" y="70%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">@SolarDataService.Data.Substring(7)</text>
            </CustomGraphics>
        </MudChart>
    }
    else
    {
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="new double[] {0, 100}" InputLabels='new string[] { "Utilization", "Capacity" }' Colors='new string[] { "#ff0000", "#cccccc" }'>
            <CustomGraphics>
                <text x="50%" y="60%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Currently</text>
                <text x="50%" y="70%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Offline</text>
            </CustomGraphics>
        </MudChart>
    }
</MudPaper>

@code {
    protected override void OnInitialized()
    {
        SolarDataService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        SolarDataService.OnChange -= StateHasChanged;
    }
}