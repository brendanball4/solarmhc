@using ApexCharts
@using solarmhc.Models.Services
@implements IDisposable
@inject LiveDataService liveDataService

<MudPaper Class="mt-3">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Class="mb-3 text-center">Current Power</MudText>
                <MudDivider Style="border-color: black;" />
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <ApexChart TItem="ChartDataPoint"
                       Width="300"
                       Height="300"
            @ref="chart">
                <ApexPointSeries TItem="ChartDataPoint"
                                 Items="dataPoints"
                                 SeriesType="SeriesType.Donut"
                                 Name="Utilization"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e => (decimal)e.Value)" />
            </ApexChart>
            <MudDivider Style="border-color: black;" />
            <div class="text-center mt-3">
                <MudText>@liveDataService.CurrentPower.utilizationPercentage.ToString("F2")% Utilization</MudText>
                <MudText>@liveDataService.CurrentPower.currentWattage kWh</MudText>
            </div>
        </MudCardContent>
    </MudCard>
</MudPaper>

@code {
    private ApexChart<ChartDataPoint> chart;
    private List<ChartDataPoint> dataPoints = new List<ChartDataPoint>();

    protected override void OnInitialized()
    {
        liveDataService.OnChange += UpdateLiveData;
        UpdateLiveData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChartAsync();
        }
    }

    private async Task UpdateChartAsync()
    {
        if (chart != null)
        {
            try
            {
                await chart.UpdateSeriesAsync(true);
            }
            catch (TaskCanceledException e)
            {
                // Handle the cancellation specifically
                Console.WriteLine("Update was cancelled: " + e.Message);
            }
            catch (Exception e)
            {
                // Handle other exceptions
                Console.WriteLine("Error updating chart: " + e.Message);
            }
        }
    }

    private async void UpdateLiveData()
    {
      if (liveDataService.CurrentPower.utilizationPercentage > 0 && liveDataService.CurrentPower.currentWattage > 0)
        {
            dataPoints = new List<ChartDataPoint>
            {
                new ChartDataPoint { Label = "Utilization", Value = liveDataService.CurrentPower.utilizationPercentage },
                new ChartDataPoint { Label = "Capacity", Value = 100 - liveDataService.CurrentPower.utilizationPercentage }
            };
        }

        await InvokeAsync(StateHasChanged);
        await UpdateChartAsync();
    }

    public void Dispose()
    {
        liveDataService.OnChange -= UpdateLiveData;
    }

    public class ChartDataPoint
    {
        public string Label { get; set; }
        public double Value { get; set; }
    }
}
