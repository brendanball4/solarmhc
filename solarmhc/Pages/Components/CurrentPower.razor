@using ApexCharts
@using solarmhc.Models.Services
@using solarmhc.Models;
@implements IDisposable
@inject LiveDataService liveDataService

<MudCard Class="h-100">
    <MudText Typo="Typo.h5" Class="pt-3 mb-3 text-center">@DashboardName</MudText>
    <MudDivider Class="mb-5" Style="border-color: black;" />

    <ApexChart TItem="DataItem" Options="chartOptions" @ref="chart">
        <ApexPointSeries TItem="DataItem" Items="data" SeriesType="SeriesType.RadialBar" Name="Intake"
                         XValue="@(item => item.Label)"
                         YValue="@(item => item.Value)">
        </ApexPointSeries>
    </ApexChart>

    <div class="text-center pb-3">
        <MudText>@liveDataService.GetCurrentPower(DashboardName).currentWattage.ToString("F1") kWh / @Capacity kWh</MudText>
    </div>

    @if (ShowLogo)
    {
        <C4iLogo />
    }
</MudCard>

@code {
    [Parameter]
    public string DashboardName { get; set; }
    [Parameter]
    public double Capacity { get; set; }
    [Parameter]
    public bool ShowLogo { get; set; } = false;

    private ApexChart<DataItem> chart;
    private List<DataItem> data = new List<DataItem>();
    private ApexChartOptions<DataItem> chartOptions = new ApexChartOptions<DataItem>();

    protected override void OnInitialized()
    {
        liveDataService.OnChange += UpdateLiveData;
        UpdateLiveData();

        chartOptions = new ApexChartOptions<DataItem>
            {
                Chart = new Chart
                {
                    Type = ApexCharts.ChartType.RadialBar,
                    Height = 350,
                    Toolbar = new Toolbar
                    {
                        Show = false
                    }
                },
                PlotOptions = new PlotOptions
                {
                    RadialBar = new PlotOptionsRadialBar
                    {
                        StartAngle = -135,
                        EndAngle = 225,
                        Hollow = new Hollow
                        {
                            Margin = 0,
                            Size = "70%",
                            Background = "#fff",
                            DropShadow = new DropShadow
                            {
                                Enabled = true,
                                Top = 3,
                                Blur = 4,
                                Opacity = 0.24
                            }
                        },
                        Track = new Track
                        {
                            Background = "#fff",
                            StrokeWidth = "67%",
                            DropShadow = new DropShadow
                            {
                                Enabled = true,
                                Top = -3,
                                Blur = 4,
                                Opacity = 0.35
                            }
                        },
                        DataLabels = new RadialBarDataLabels
                        {
                            Show = true,
                            Name = new RadialBarDataLabelsName
                            {
                                OffsetY = -10,
                                Color = "#888",
                                FontSize = "17px"
                            },
                            Value = new RadialBarDataLabelsValue
                            {
                                Formatter = "function(val) { return parseInt(val) + '%'; }", // Add the percentage sign
                                Color = "#111",
                                FontSize = "36px"
                            }
                        }
                    }
                },
                Fill = new Fill
                {
                    Type = FillType.Gradient,
                    Gradient = new FillGradient
                    {
                        Shade = GradientShade.Dark,
                        ShadeIntensity = 0.2,
                        Type = GradientType.Horizontal,
                        GradientToColors = new List<string> { "#e6b15a" },
                        InverseColors = true,
                        OpacityFrom = 1,
                        OpacityTo = 1,
                        Stops = new List<double> { 0, 100 }
                    }
                },
                Stroke = new Stroke
                {
                    LineCap = LineCap.Round
                },
                Labels = new List<string> { "Percent" }
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChartAsync();
        }
    }

    private async Task UpdateChartAsync()
    {
        if (chart != null)
        {
            try
            {
                await chart.UpdateSeriesAsync(true);
            }
            catch (TaskCanceledException e)
            {
                Console.WriteLine("Update was cancelled: " + e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error updating chart: " + e.Message);
            }
        }
    }

    private async void UpdateLiveData()
    {
        var currentPower = liveDataService.GetCurrentPower(DashboardName);

        if (currentPower.utilizationPercentage >= 0 && currentPower.currentWattage >= 0)
        {
            data = new List<DataItem>
            {
                new DataItem { Label = "Intake", Value = (decimal)currentPower.utilizationPercentage },
            };
        }

        await InvokeAsync(StateHasChanged);
        await UpdateChartAsync();
    }

    public void Dispose()
    {
        liveDataService.OnChange -= UpdateLiveData;
    }

    public class DataItem
    {
        public string Label { get; set; }
        public decimal Value { get; set; }
    }
}
