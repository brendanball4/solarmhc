@using ApexCharts
@using solarmhc.Models.Services
@using solarmhc.Models;
@implements IDisposable
@inject LiveDataService liveDataService

<MudCard Class="h-100">
    <MudText Typo="Typo.h5" Class="pt-5 mb-5 text-center">Current Power</MudText>
    <MudDivider Class="mb-5" Style="border-color: black;" />

    <ApexChart TItem="ChartDataPoint" Options="options"
    @ref="chart">
        <ApexPointSeries TItem="ChartDataPoint"
                         Items="dataPoints"
                         SeriesType="SeriesType.Donut"
                         Name="Utilization"
                         XValue="@(e => e.Label)"
                         YValue="@(e => (decimal)e.Value)" />
    </ApexChart>
    <MudDivider Class="mt-0 mt-lg-5" Style="border-color: black;" />
    <div class="text-center  p-sm-3 p-3">
        <MudText>@liveDataService.GetCurrentPower(DashboardName).utilizationPercentage.ToString("F1")% Utilization</MudText>
        <MudText>@liveDataService.GetCurrentPower(DashboardName).currentWattage.ToString("F1") kWh</MudText>
    </div>
</MudCard>

@code {
    [Parameter]
    public string DashboardName { get; set; }
    private ApexChart<ChartDataPoint> chart;
    private List<ChartDataPoint> dataPoints = new List<ChartDataPoint>();
    private ApexChartOptions<ChartDataPoint> options = new();

    protected override void OnInitialized()
    {
        liveDataService.OnChange += UpdateLiveData;
        UpdateLiveData();

        options = new ApexChartOptions<ChartDataPoint>
            {
                Legend = new Legend
                {
                    Position = LegendPosition.Bottom,
                    HorizontalAlign = ApexCharts.Align.Center,
                    FontSize = "16px"
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChartAsync();
        }
    }

    private async Task UpdateChartAsync()
    {
        if (chart != null)
        {
            try
            {
                await chart.UpdateSeriesAsync(true);
            }
            catch (TaskCanceledException e)
            {
                // Handle the cancellation specifically
                Console.WriteLine("Update was cancelled: " + e.Message);
            }
            catch (Exception e)
            {
                // Handle other exceptions
                Console.WriteLine("Error updating chart: " + e.Message);
            }
        }
    }

    private async void UpdateLiveData()
    {
        if (liveDataService.GetCurrentPower(DashboardName).utilizationPercentage >= 0 && liveDataService.GetCurrentPower(DashboardName).currentWattage >= 0)
        {
            dataPoints = new List<ChartDataPoint>
            {
                new ChartDataPoint { Label = "Utilization", Value = liveDataService.GetCurrentPower(DashboardName).utilizationPercentage },
                new ChartDataPoint { Label = "Capacity", Value = 100 - liveDataService.GetCurrentPower(DashboardName).utilizationPercentage }
            };
        }

        await InvokeAsync(StateHasChanged);
        await UpdateChartAsync();
    }

    public void Dispose()
    {
        liveDataService.OnChange -= UpdateLiveData;
    }

    public class ChartDataPoint
    {
        public string Label { get; set; }
        public double Value { get; set; }
    }
}
