@using ApexCharts
@using solarmhc.Models.Models
@using solarmhc.Models.Services
@using solarmhc.Models;
@inject LiveDataService liveDataService
@implements IDisposable

<ApexChart TItem="PowerData" @ref="chart" Title="Daily Power (kWh)" Options="options" Width="@("100%")" Height="500">
    <ApexPointSeries TItem="PowerData" Items="@data" Name="kW" SeriesType="SeriesType.Area" XValue="@(e => e.Date)" YValue="@(e => e.Intake)"  />
</ApexChart>

@code {
    private List<PowerData> data = new List<PowerData>();
    private ApexChart<PowerData> chart; // Reference to the ApexChart component
    private ApexChartOptions<PowerData> options = new();

    [Parameter]
    public string DashboardName { get; set; }
    [Parameter]
    public double Capacity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the LiveDataService's OnChange event
        liveDataService.OnChange += OnChangeHandler;

        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        if (!string.IsNullOrEmpty(DashboardName))
        {
            data = await liveDataService.GetPowerData(DashboardName);

            SetupChartOptions();
            await InvokeAsync(StateHasChanged);  // Ensure the chart updates with new data
        }
    }

    private void SetupChartOptions()
    {
        options = new ApexChartOptions<PowerData>
            {
                Xaxis = new XAxis
                {
                    Type = XAxisType.Datetime,              // Ensure the type is set to 'Datetime'
                    Labels = new XAxisLabels
                    {
                        Format = "h:mm tt",                 // Set the label format
                        DatetimeUTC = false                 // Ensure timezone is respected
                    },
                },

                Yaxis = new List<YAxis>
                {
                    new YAxis
                    {
                        Min = 0,
                        Max = Capacity  // Set the Y-axis range based on your data
                    }
                },
                Fill = new Fill
                {
                    Colors = new List<string> { "#efc337" }, // Set area color
                    Opacity = 0.8                           // Adjust opacity for visibility
                },
                Colors = new List<string>
                {
                    "#efc337", // Set color for the line
                },
                Tooltip = new Tooltip
                {
                    Enabled = true,
                    X = new TooltipX
                    {
                        Format = "hh:mm tt" // Tooltip format for datetime
                    },
                }
            };
    }

    private void OnChangeHandler()
    {
        // This method will be called when LiveDataService triggers an update
        InvokeAsync(AppendNewDataPoint);
    }

    private async Task AppendNewDataPoint()
    {
        if (!string.IsNullOrEmpty(DashboardName))
        {
            // Get the latest data point
            var latestData = await liveDataService.GetPowerData(DashboardName);

            if (latestData != null)
            {
                if (data[data.Count - 1].Date != latestData[latestData.Count - 1].Date)
                {
                    data.Add(latestData[latestData.Count - 1]);

                    List<PowerData> newPoint = new List<PowerData>();
                    newPoint.Add(latestData[latestData.Count - 1]);

                    // Append the new data point to the chart without resetting it
                    if (chart != null)
                    {
                        await chart.AppendDataAsync(newPoint); // Assuming `AppendDataAsync` is valid
                    }
                }
            }
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        liveDataService.OnChange -= OnChangeHandler;
    }
}
