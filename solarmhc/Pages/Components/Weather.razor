@using solarmhc.Models.Services
@inject LiveDataService liveDataService

<MudCard Style="height: 100%;">
    <MudCardHeader>
        <MudGrid Justify="Justify.FlexEnd">
            <MudItem xs="2">
                <img src="@weatherData?.IconUrl" alt="Weather Icon" />
            </MudItem>
            <MudItem xs="10">
                <div style="display: flex; flex-direction: column; align-items: flex-end;">
                    <MudText Typo="Typo.h6">@weatherData?.City, @weatherData?.Province</MudText>
                    <MudText Typo="Typo.h4">@weatherData?.Condition</MudText>
                </div>
            </MudItem>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3" sm="4">
                <div style="display: flex; flex-direction: column; align-items: start;">
                    <MudText Typo="Typo.h2">@((int)weatherData?.Temperature)°</MudText>
                    <MudText Typo="Typo.subtitle1">H @((int)weatherData?.MaxTemperature)° / L @((int)weatherData?.MinTemperature)°</MudText>
                </div>
            </MudItem>
            <MudItem xs="9" sm="8">
                <div style="display: flex; flex-direction: row; justify-content: flex-end; align-items: flex-end;">
                    @foreach (var item in @weatherData?.ForecastData)
                    {
                        <div style="display: flex; flex-direction: column; align-items: center; padding: 0 10px;">
                            <MudText Typo="Typo.subtitle2">@((int)item.Temp_C)°</MudText>
                            <img src="@item.Condition.Icon" alt="Weather Icon" />
                            <MudText Typo="Typo.subtitle2">@item.Time.ToString("h tt")</MudText>
                        </div>
                    }
                </div>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    private WeatherData weatherData;

    protected override void OnInitialized()
    {
        liveDataService.OnChange += UpdateLiveData;
        weatherData = liveDataService.GetCurrentWeather();
        UpdateLiveData();
    }

    private void UpdateLiveData()
    {
        weatherData = liveDataService.GetCurrentWeather();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        liveDataService.OnChange -= UpdateLiveData;
    }
}
