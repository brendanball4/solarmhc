@using ApexCharts
@using System.Collections.Concurrent;
@using solarmhc.Models.Models
@using solarmhc.Models.Services
@inject LiveDataService liveDataService
@implements IDisposable

<MudCard Style="height: 100%;">
    <MudCardContent Style="height: 100%;">
        <ApexChart TItem="PowerData" @ref="chart" Title="Daily Power (kW)" Options="options" Width="@("100%")" Height="@("100%")">
        </ApexChart>
    </MudCardContent>
</MudCard>

@code {
    private ConcurrentDictionary<string, List<PowerData>> dataDictionary = new ConcurrentDictionary<string, List<PowerData>>();
    private List<PowerData> averageData = new List<PowerData>();
    private ApexChart<PowerData> chart;
    private ApexChartOptions<PowerData> options = new();
    private bool showAverageData = true;
    private bool isFirstRender = true;

    protected override async Task OnInitializedAsync()
    {
        liveDataService.OnChange += OnChangeHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            await LoadInitialData();
            await UpdateChart();  // Ensure chart is updated after the first render
        }
    }

    private async Task LoadInitialData()
    {
        dataDictionary = await liveDataService.GetPowerDataOverview();
        SetupChartOptions();
    }

    private void SetupChartOptions()
    {
        options = new ApexChartOptions<PowerData>
            {
                Xaxis = new XAxis
                {
                    Type = XAxisType.Datetime,
                    Labels = new XAxisLabels
                    {
                        Format = "h:mm tt",
                        DatetimeUTC = false
                    },
                },
                Yaxis = new List<YAxis>
                {
                    new YAxis
                    {
                        Min = 0,
                        Max = 25
                    }
                },
                Tooltip = new Tooltip
                {
                    Enabled = true,
                    X = new TooltipX
                    {
                        Format = "hh:mm tt"
                    },
                },
                Colors = new List<string>
                {
                    "#efc337", "#4d4d4d", "#2b4e89", "#ff3333", "#0064bd"
                }
            };
    }

    private void OnChangeHandler()
    {
        InvokeAsync(UpdateData);
    }

    private async Task UpdateData()
    {
        dataDictionary = await liveDataService.GetPowerDataOverview();

        await UpdateChart();
    }

    private async Task UpdateChart()
    {
        // Only update the chart if it has been rendered (i.e., chart is not null)
        if (chart != null)
        {
            // Clear the chart safely
            chart.Series.Clear();

            foreach (var dashboardData in dataDictionary.OrderBy(x => x.Key))
            {
                chart.Series.Add(new ApexPointSeries<PowerData>
                    {
                        Chart = chart,
                        Name = dashboardData.Key,
                        Items = dashboardData.Value,
                        XValue = (pd => pd.Date), // Map XValue to Date
                        YValue = (pd => pd.Intake) // Map YValue to Intake
                    });
            }

            // Update the chart with the new series
            await chart.UpdateSeriesAsync();
        }
    }

    public void Dispose()
    {
        liveDataService.OnChange -= OnChangeHandler;
    }
}
