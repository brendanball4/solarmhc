@using ApexCharts
@using System.Collections.Concurrent;
@using solarmhc.Models.Models;
@using solarmhc.Models.Services;
@using solarmhc.Models;
@inject LiveDataService liveDataService
@implements IDisposable

<MudCard Style="height: 100%;">
    <MudCardContent Style="height: 100%;">
        <ApexChart TItem="PowerData" @ref="chart" Title="Daily Power (kW)" Options="options" Width="@("100%")" Height="@("100%")">
            @foreach (var series in seriesDictionary)
            {
                <ApexPointSeries TItem="PowerData" Items="@series.Value.Items" Name="@series.Key" SeriesType="SeriesType.Area" YValue="@(e => e.Intake)" XValue="@(e => e.Date)" />
            }
        </ApexChart>
    </MudCardContent>
</MudCard>

@code {
    private ConcurrentDictionary<string, List<PowerData>> dataDictionary = new ConcurrentDictionary<string, List<PowerData>>();
    private Dictionary<string, ApexPointSeries<PowerData>> seriesDictionary = new Dictionary<string, ApexPointSeries<PowerData>>();
    private ApexChart<PowerData> chart;
    private ApexChartOptions<PowerData> options = new();
    private bool isFirstRender = true;

    protected override async Task OnInitializedAsync()
    {
        liveDataService.OnChange += OnChangeHandler;
        await LoadInitialData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            await UpdateData();
        }
    }

    private async Task LoadInitialData()
    {
        dataDictionary = await liveDataService.GetPowerDataOverview();

        if (dataDictionary.Count() != 5)
        {
            dataDictionary.GetOrAdd(Constants.Names.APS, new List<PowerData>());
            dataDictionary.GetOrAdd(Constants.Names.Fronius, new List<PowerData>());
            dataDictionary.GetOrAdd(Constants.Names.Huawei, new List<PowerData>());
            dataDictionary.GetOrAdd(Constants.Names.SolarEdge, new List<PowerData>());
            dataDictionary.GetOrAdd(Constants.Names.Sunny, new List<PowerData>());
        }

        SetupChartOptions();
        InitializeSeries();
    }

    private void SetupChartOptions()
    {
        options = new ApexChartOptions<PowerData>
            {
                Xaxis = new XAxis
                {
                    Type = XAxisType.Datetime,
                    Labels = new XAxisLabels
                    {
                        Format = "h:mm tt",
                        DatetimeUTC = false
                    },
                },
                Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Min = 0,
                    Max = 25
                }
            },
                Tooltip = new Tooltip
                {
                    Enabled = true,
                    X = new TooltipX
                    {
                        Format = "hh:mm tt"
                    },
                },
                Colors = new List<string>
            {
                "#efc337", "#4d4d4d", "#2b4e89", "#ff3333", "#0064bd"
            }
            };
    }

    private void InitializeSeries()
    {
        foreach (var dashboardData in dataDictionary.OrderBy(x => x.Key))
        {
            var series = new ApexPointSeries<PowerData>
                {
                    Name = dashboardData.Key,
                    Items = dashboardData.Value,
                    XValue = (pd => pd.Date),
                    YValue = (pd => pd.Intake)
                };
            seriesDictionary[dashboardData.Key] = series;
        }
    }

    private void OnChangeHandler()
    {
        InvokeAsync(UpdateData);
    }

    private async Task UpdateData()
    {
        // Only update the chart if it has been rendered (i.e., chart is not null)
        if (chart != null)
        {
            // Clear the chart safely
            chart.Series.Clear();

            foreach (var dashboardData in dataDictionary.OrderBy(x => x.Key))
            {
                chart.Series.Add(new ApexPointSeries<PowerData>
                    {
                        Chart = chart,
                        Name = dashboardData.Key,
                        Items = dashboardData.Value,
                        XValue = (pd => pd.Date), // Map XValue to Date
                        YValue = (pd => pd.Intake) // Map YValue to Intake
                    });
            }

            // Update the chart with the new series
            await chart.UpdateSeriesAsync();
        }
    }

    public void Dispose()
    {
        liveDataService.OnChange -= OnChangeHandler;
    }
}
