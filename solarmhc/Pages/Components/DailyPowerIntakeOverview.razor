@using ApexCharts
@using System.Collections.Concurrent
@implements IDisposable

<MudCard Style="height: 100%;">
    <MudCardContent Style="height: 100%;">
        <ApexChart TItem="PowerData" @ref="chart" Title="Daily Power (kW)" Options="options" Width="@("100%")" Height="@("100%")">
        </ApexChart>
    </MudCardContent>
</MudCard>

@code {
    private ConcurrentDictionary<string, List<PowerData>> dataDictionary = new ConcurrentDictionary<string, List<PowerData>>();
    private List<PowerData> averageData = new List<PowerData>();
    private ApexChart<PowerData> chart;
    private ApexChartOptions<PowerData> options = new();
    private bool showAverageData = true;
    private bool isFirstRender = true;

    protected override async Task OnInitializedAsync()
    {
        // Replace live data with sample data for testing purposes
        LoadSampleData();
        SetupChartOptions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            await UpdateChart();  // Ensure chart is updated after the first render
        }
    }

    private void LoadSampleData()
    {
        // Add sample data for testing purposes
        dataDictionary["SolarEdge"] = new List<PowerData>
        {
            new PowerData { Date = DateTime.Today.AddHours(1), Intake = 5 },
            new PowerData { Date = DateTime.Today.AddHours(2), Intake = 10 },
            new PowerData { Date = DateTime.Today.AddHours(3), Intake = 15 },
            new PowerData { Date = DateTime.Today.AddHours(4), Intake = 20 },
            new PowerData { Date = DateTime.Today.AddHours(5), Intake = 18 }
        };

        dataDictionary["Sunny"] = new List<PowerData>
        {
            new PowerData { Date = DateTime.Today.AddHours(1), Intake = 4 },
            new PowerData { Date = DateTime.Today.AddHours(2), Intake = 9 },
            new PowerData { Date = DateTime.Today.AddHours(3), Intake = 14 },
            new PowerData { Date = DateTime.Today.AddHours(4), Intake = 19 },
            new PowerData { Date = DateTime.Today.AddHours(5), Intake = 17 }
        };

        dataDictionary["APS"] = new List<PowerData>
        {
            new PowerData { Date = DateTime.Today.AddHours(1), Intake = 3 },
            new PowerData { Date = DateTime.Today.AddHours(2), Intake = 8 },
            new PowerData { Date = DateTime.Today.AddHours(3), Intake = 13 },
            new PowerData { Date = DateTime.Today.AddHours(4), Intake = 18 },
            new PowerData { Date = DateTime.Today.AddHours(5), Intake = 16 }
        };

        dataDictionary["Huawei"] = new List<PowerData>
        {
            new PowerData { Date = DateTime.Today.AddHours(1), Intake = 2 },
            new PowerData { Date = DateTime.Today.AddHours(2), Intake = 7 },
            new PowerData { Date = DateTime.Today.AddHours(3), Intake = 12 },
            new PowerData { Date = DateTime.Today.AddHours(4), Intake = 17 },
            new PowerData { Date = DateTime.Today.AddHours(5), Intake = 15 }
        };

        dataDictionary["Fronius"] = new List<PowerData>
        {
            new PowerData { Date = DateTime.Today.AddHours(1), Intake = 1 },
            new PowerData { Date = DateTime.Today.AddHours(2), Intake = 6 },
            new PowerData { Date = DateTime.Today.AddHours(3), Intake = 11 },
            new PowerData { Date = DateTime.Today.AddHours(4), Intake = 16 },
            new PowerData { Date = DateTime.Today.AddHours(5), Intake = 14 }
        };
    }

    private void SetupChartOptions()
    {
        options = new ApexChartOptions<PowerData>
            {
                Xaxis = new XAxis
                {
                    Type = XAxisType.Datetime,
                    Labels = new XAxisLabels
                    {
                        Format = "h:mm tt",
                        DatetimeUTC = false
                    },
                },
                Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Min = 0,
                    Max = 25
                }
            },
                Tooltip = new Tooltip
                {
                    Enabled = true,
                    X = new TooltipX
                    {
                        Format = "hh:mm tt"
                    },
                },
                Colors = new List<string>
            {
                "#efc337", "#4d4d4d", "#2b4e89", "#ff3333", "#0064bd"
            }
            };
    }

    private async Task UpdateChart()
    {
        if (chart != null)
        {
            chart.Series.Clear();

            foreach (var dashboardData in dataDictionary.OrderBy(x => x.Key))
            {
                chart.Series.Add(new ApexPointSeries<PowerData>
                    {
                        Chart = chart,
                        Name = dashboardData.Key,
                        Items = dashboardData.Value,
                        XValue = (pd => pd.Date),  // Map XValue to Date
                        YValue = (pd => (decimal)pd.Intake) // Map YValue to Intake
                    });
            }

            await chart.UpdateSeriesAsync();
        }
    }

    public void Dispose()
    {
        // No live data service to dispose
    }

    // Sample PowerData class
    public class PowerData
    {
        public DateTime Date { get; set; }
        public double Intake { get; set; }
    }
}
